{
  // Place your workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "JSON Schema - Object": {
    "scope": "javascript,typescript",
    "prefix": "json-object",
    "body": [
      "type: 'object',",
      "additionalProperties: false,",
      "required: [],",
      "properties: {},",
    ]
  },
  "JSON Schema - Array": {
    "scope": "javascript,typescript",
    "prefix": "json-array",
    "body": [
      "type: 'array',",
      "additionalItems: false,",
      "minItems: 0,",
      "maxItems: 0,",
      "uniqueItems: true,",
      "items: {},",
    ]
  },
  "JSON Schema - Boolean": {
    "scope": "javascript,typescript",
    "prefix": "json-boolean",
    "body": [
      "type: 'boolean',",
    ]
  },
  "JSON Schema - String": {
    "scope": "javascript,typescript",
    "prefix": "json-string",
    "body": [
      "type: 'string',",
      "minLength: 0,",
      "maxLength: 0,",
    ]
  },
  "JSON Schema - Integer": {
    "scope": "javascript,typescript",
    "prefix": "json-integer",
    "body": [
      "type: 'integer',",
      "minimum: 0,",
      "maximum: 0,",
      "exclusiveMinimum: 0,",
      "exclusiveMaximum: 0,",
      "multipleOf: 0,",
    ]
  },
  "JSON Schema - Number": {
    "scope": "javascript,typescript",
    "prefix": "json-number",
    "body": [
      "type: 'number',",
      "minimum: 0,",
      "maximum: 0,",
      "exclusiveMinimum: 0,",
      "exclusiveMaximum: 0,",
      "multipleOf: 0,",
    ]
  },
  "JSON Schema - Pattern - URL": {
    "scope": "javascript,typescript",
    "prefix": "json-url",
    "body": [
      "pattern: '^https?://.+',"
    ]
  },
  "JSON Schema - Pattern - URL no Slash": {
    "scope": "javascript,typescript",
    "prefix": "json-url-no-slash",
    "body": [
      "pattern: '^https?://.+[^/]$',"
    ]
  },
  "JSON Schema - Pattern - Hex": {
    "scope": "javascript,typescript",
    "prefix": "json-hex",
    "body": [
      "pattern: '^[a-f0-9]+$',"
    ]
  },
  "JSON Schema - Pattern - ASCII": {
    "scope": "javascript,typescript",
    "prefix": "json-ascii",
    "body": [
      "pattern: '^[\\x00-\\x7F]$',"
    ]
  },
  "JSON Schema - Pattern - Base62": {
    "scope": "javascript,typescript",
    "prefix": "json-base62",
    "body": [
      "pattern: '^[A-Za-z0-9]+$',"
    ]
  },
  "JSON Schema - Pattern - Base64": {
    "scope": "javascript,typescript",
    "prefix": "json-base64",
    "body": [
      "pattern: '^[A-Za-z0-9_-]+$',"
    ]
  },
}
